#!/usr/bin/env python

# ===-- ktest-tool --------------------------------------------------------===##
# 
#                      The KLEE Symbolic Virtual Machine
# 
#  This file is distributed under the University of Illinois Open Source
#  License. See LICENSE.TXT for details.
# 
# ===----------------------------------------------------------------------===##

import os
import struct
import sys

version_no=3

class KTestError(Exception):
    pass

class KTest:
    @staticmethod
    def fromfile(path):
        if not os.path.exists(path):
            print("ERROR: file %s not found" % (path))
            sys.exit(1)
            
        f = open(path,'rb')
        hdr = f.read(5)
        if len(hdr)!=5 or (hdr!=b'KTEST' and hdr != b"BOUT\n"):
            raise KTestError('unrecognized file')
        version, = struct.unpack('>i', f.read(4))
        if version > version_no:
            raise KTestError('unrecognized version')
        numArgs, = struct.unpack('>i', f.read(4))
        args = []
        for i in range(numArgs):
            size, = struct.unpack('>i', f.read(4))
            args.append(str(f.read(size).decode(encoding='ascii')))
            
        if version >= 2:
            symArgvs, = struct.unpack('>i', f.read(4))
            symArgvLen, = struct.unpack('>i', f.read(4))
        else:
            symArgvs = 0
            symArgvLen = 0

        numObjects, = struct.unpack('>i', f.read(4))
        objects = []
        for i in range(numObjects):
            size, = struct.unpack('>i', f.read(4))
            name = f.read(size)
            size, = struct.unpack('>i', f.read(4))
            bytes = f.read(size)
            objects.append( (name,bytes) )

        # Create an instance
        b = KTest(version, args, symArgvs, symArgvLen, objects)
        # Augment with extra filename field
        b.filename = path
        return b
    
    def __init__(self, version, args, symArgvs, symArgvLen, objects):
        self.version = version
        self.symArgvs = symArgvs
        self.symArgvLen = symArgvLen
        self.args = args
        self.objects = objects

        # add a field that represents the name of the program used to
        # generate this .ktest file:
        program_full_path = self.args[0]
        program_name = os.path.basename(program_full_path)
        # sometimes program names end in .bc, so strip them
        if program_name.endswith('.bc'):
          program_name = program_name[:-3]
        self.programName = program_name
        
def trimZeros(str):
    for i in range(len(str))[::-1]:
        if str[i] != '\x00':
            return str[:i+1]
    return ''
    
def main(args):
    from optparse import OptionParser
    op = OptionParser("usage: %prog [options] files")
    op.add_option('','--trim-zeros', dest='trimZeros', action='store_true', 
                  default=False,
                  help='trim trailing zeros')
    op.add_option('','--write-ints', dest='writeInts', action='store_true',
                  default=False,
                  help='convert 4-byte sequences to integers')
    op.add_option('','--write-floats', dest='writeFloats', action='store_true',
                  default=False,
                  help='convert 4-byte sequences to floats')
    op.add_option('','--write-doubles', dest='writeDoubles', action='store_true',
                  default=False,
                  help='convert 8-bytes sequences to doubles')
    op.add_option('','--assume-array', dest='assume_array', action='store_true')
    
    opts,args = op.parse_args()
    if not args:
        op.error("incorrect number of arguments")

    for file in args:
        b = KTest.fromfile(file)
        pos = 0
        print('ktest file : %r' % file)
        print('args       : %r' % b.args)
        print('num objects: %r' % len(b.objects))
        for i,(name,data) in enumerate(b.objects):
            if opts.trimZeros:
                str = trimZeros(data)
            else:
                str = data

            print('object %4d: name: %r' % (i, name))
            print('object %4d: size: %r' % (i, len(data)))
            if opts.assume_array:
              print('object %4d:' %i)
              if opts.writeDoubles and len(data) % 8 == 0:
                # Gather bytes into 8-byte chunks
                doubles = split(data, 8)
                # Print the doubles
                print('Displaying as array of doubles')
                for double_index, d in enumerate(doubles):
                  print('object%4d[%d]: %r' % (i, double_index, struct.unpack('d', d)[0]))
              elif opts.writeFloats and len(data) % 4 == 0:
                # Gather bytes into 4-byte chunks
                floats = split(data, 4)
                # Print the floats
                for float_index, d in enumerate(floats):
                  print('object%4d[%d]: %r' % (i, float_index, struct.unpack('f', d)[0]))
              elif opts.writeInts and len(data) % 4 == 0:
                # Gather bytes into 4-byte chunks
                int32s = split(data, 4)
                # Print the floats
                for int_index, int32 in enumerate(int32s):
                  print('object%4d[%d]: %r' % (i, int_index, struct.unpack('i', int32)[0]))
              else:
                print('object %4d: data: %r' % (i, str))
            else:
              if opts.writeInts and len(data) == 4:
                  print('object %4d: data: %r' % (i, struct.unpack('i',str)[0]))
              elif opts.writeFloats and len(data) == 4:
                  print('object %4d: data: %r' % (i, struct.unpack('f',str)[0]))
              elif opts.writeDoubles and len(data) == 8:
                  print('object %4d: data: %r' % (i, struct.unpack('d',str)[0]))
              else:
                  print('object %4d: data: %r' % (i, str))
        if file != args[-1]:
            print()

def split(data, chunk_size):
  assert chunk_size > 0
  assert len(data) % chunk_size == 0
  # Gather bytes into 8-byte chunks
  chunks = []
  chunk_bytes = None
  for byte_index, byte_value in enumerate(data):
    if byte_index % chunk_size == 0:
      chunk_bytes = [ byte_value ]
    else:
      chunk_bytes.append(byte_value)
    # if this is the last byte store the chunk
    if byte_index % chunk_size == (chunk_size -1):
      chunks.append(bytes(chunk_bytes))

  return chunks

if __name__=='__main__':
    main(sys.argv)
